#                             #                                                                         #
#                             #                                                                         #
#                             #                                                                         #
#                             ###########################################################################
#                             #                                                                         #
#                             #   ███╗░░░███╗███████╗░██████╗░██████╗░█████╗░░██████╗░███████╗░██████╗  #
#                             #   ████╗░████║██╔════╝██╔════╝██╔════╝██╔══██╗██╔════╝░██╔════╝██╔════╝  #
#                             #   ██╔████╔██║█████╗░░╚█████╗░╚█████╗░███████║██║░░██╗░█████╗░░╚█████╗░  #
#                             #   ██║╚██╔╝██║██╔══╝░░░╚═══██╗░╚═══██╗██╔══██║██║░░╚██╗██╔══╝░░░╚═══██╗  #
#                             #   ██║░╚═╝░██║███████╗██████╔╝██████╔╝██║░░██║╚██████╔╝███████╗██████╔╝  #
#                             #   ╚═╝░░░░░╚═╝╚══════╝╚═════╝░╚═════╝░╚═╝░░╚═╝░╚═════╝░╚══════╝╚═════╝░  #
#                             #                                                                         #
#                             ###########################################################################
#
#
# Welcome to the messages file, here you'll be able to display your custom messages for the plugin.
# When you make a change in this file, you don't have to execute a be.machigan.protecteddebugstickl.command. Just save the file and the
# plugin will register your change.
#
#
#
# First, the plugin allow you to use the Minecraft color code. For example, if you want to put the message
# in red, you have to use "&4" before the text (all allowed color code are here : https://minecraft.tools/fr/color-code.php)
# But you can alose generate a gradient (=variation of one color A to another color B) in a chars string
# by using the code : "<s:[code RGB of the first color]>[your chars string]<e:[code RGB of the second color]>"
# Example :
# I want a gradient from light blue (code : 80FFFF) to pink (code : FF99FF) for the following sentence : "demonstration of a gradient"
# I'll have the following code :
#    <s:80FFFF>demonstration of a gradient<e:FF99FF>
# Note that you can use format code in you sentence (like italic or bold) to add before your sentence to color,
# so for our example before, if I want to have my gradient in bold, I'll have :
#    <s:80FFFF>&ldemonstration of a gradient<e:FF99FF>
#
#
#
# A message isn't just a text in the tchat ! You can do more.
# For each message, you can add :
# - a hover message : when the player puts his mouse cursor on the message in the tchat
# - a run be.machigan.protecteddebugstickl.command : when the player clicks on the message
# - a suggest be.machigan.protecteddebugstickl.command : when the player clicks on the message
# - an actionbar message : to display the message above his hotbar
#
# To configure them, it's very easy. You've to add a field with the same name as the message but with a word after :
# - Hover : for hover message
# - Run : to add a run be.machigan.protecteddebugstickl.command
# - Suggest : to add a suggest be.machigan.protecteddebugstickl.command
# - Hotbar : to add a message above the hotbar
# Exemple :
#   HelloMessage: "Hello player !"
#   HelloMessageHover: "Ho you put your mouse on me !"
#   HelloMessageRun: "/hello"
#   HelloHotbar: "Hello from the hotbar !"
#
# In our example, the message will send a message in the tchat to the player. When the player put his mouse cursor
# on the message, he will see "Ho you put your mouse on me !". When he will click on it, he will execute the be.machigan.protecteddebugstickl.command
# "/hello". And he will also see above his hotbar the message "Hello from the hotbar"
#
# You have to know that (if the message isn't necessary), you don't have to configure the original message to
# configure a Hotbar message. You'll see that I have configured some message like that.
#
#
#
# Some messages aren't necessaries. It's always wrote when you can skip the configuration of a message or not
#
#
#
# In the text who list the PlaceHolders usable, you'll sometimes see {block} or {property}. It's mean you can
# write more information in the message :
# {block_material} : write this to have the material of the block
# {block_loc_x} : write this to have to X pos of the block
# {block_loc_y} : write this to have to Y pos of the block
# {block_loc_z} : write this to have to Z pos of the block
# {block_loc_world} : write this to have the world name of the block pos
#
# {property_name} : write this to have the property name
# {property_durability} : write this to have the cost in durability of the property
# {property_perm} : write this to have the required perm to modify the property
#
#
#
# The plugin can use PlaceHolderAPI (or PAPI). You can, in each type of message put a placeholder from PAPI (don't
# forget to install the placeholders via "/papi ecloud download <placeholders>").
# In PlaceHolderAPI you can use three type of placeholders :
# - those who concern no player (eg: %server_name%) : usable everywhere in the plugin
# - those who concern an online player (eg:%player_name%) : your will be notified when you can use them
# - those who concern an offline player : for the moment, nowhere in the plugin
#
#
#
# To finish, you have to know that you can create your own variable in the field named "PersonalVariable".
# Her you'll be able to add your own variable with its value. And to use it in a message you have to put
# "{name_of_the_variable}". You can create as much as you want !
# Exemple :
# PersonalVariable:
#  prefix: "&3[&6&lProtected&e-DS&3]&r"
# To use the prefix variable, I have to put "{prefix}" in my message. And the plugin will replace "{prefix}" with
# "&3[&6&lProtected&e-DS&3]&r" (colored, of course).
#
#
#
# Good luck for the configuration of the message !


PersonalVariable:
  # In this case, I will be able to use this string in any message by writing '{prefix}'
  # <!> The case is important ! {pRefiX} ≠ {prefix}
  prefix: "#3399FF[<s:667db6>Debug<e:0082c8>#3399FF-<s:0082c8>Stick<e:667db6>#3399FF]&r"


# In the children fields of "OnUse", you can use all PlaceHolders from PAPI that concern a player.
# Here the Placeholders will concern the player who uses the debug stick.
OnUse:
  # When the player wants to edit a block but a plugin doesn't allow the
  # player to build in this area
  # This message is not necessary. I recommend you to not write a message
  # here, because the plugin that doesn't allow the player will already
  # send one to the player
  # PH :
  # {block} : the block that the player wants to edit
  PluginPrevent:

  NoPerm:
    # When the player wants to modify a property, but has not ce permission
    # to modify the property.
    # This message is not necessary.
    # PH :
    # {property} : the property that the player wants to edit
    Property:  "{prefix} &cYou don't have permission to modify this property !"

    Infinite:
      # When the player doesn't have the permission to edit a property with
      # infinite debug stick
      # This message isn't necessary
      # PH :
      # {block} : the block that the player wants to edit
      # {perm} : the missing permission
      Edit:

      # When the player wants to see all editables properties with the infinite debug stick,
      # but he doesn't have the perm
      # This message isn't necessary
      # The PH are the same as "Edit" field.
      See:

    # Same as the infinite field but with the basic
    Basic:
      Edit:
      See:

    Inspector:
      # When the player doesn't have the permission to see the values of the properties of a
      # block with the inspector
      # This message isn't necessary
      # PH :
      # {block} : the block that the player wanted to see the properties
      # {perm} : the perm missing
      Properties:

      # When the player doesn't have the permission to see the implementations of a block
      # This message isn't necessary
      # PH :
      # {block} : the block that the player wanted to see the implementations
      # {perm} : the perm missing
      Implementation:

  # When the player wants to modify a property, but his debug stick doesn't have enough
  # durability.
  # This message is not necessary.
  # PH :
  # {property} : the property that the player wants to modify,
  NotEnoughDurability: "{prefix} &cYour debug stick hasn't enough durability &7"

  BlackList:
    # When the world where the player wants to edit is in the blacklist
    # This message is not necessary.
    # PH :
    # {block} : the block that the player wants to edit
    World: "{prefix} &cYou can't use the debug stick in this world !"
    # When the block that the player wants to edit is in the blacklist.
    # This message is not necessary.
    # PH :
    # {block} : the block that the player wants to edit
    Material: "{prefix} &cThis block cannot be edited !"

  # When a player wants to change the type of the property
  # of a block but the block doesn't have the type of property
  # This message isn't necessary
  # PH :
  # {block} : the block that the player wants to modify
  NoPropertyType:

  # When the player uses a debug stick that contains invalid data (often because of a debug stick from an older version).
  # It's not possible to restore it to a usable debug stick. It needs to ask to the player to get a new one.
  # This message is necessary.
  InvalidDebugStick: "{prefix} &cYour DebugStick is corrupted, please contact an administrator to get a new one !
  \nYours is not usable anymore !"

  # When the player change the current property of the debug stick
  # This message isn't necessary
  # PH :
  # {property} : the property that the player has now
  # {block} : the block that the player clicked
  ChangeProperty:
  ChangePropertyHotbar: "{prefix} &aChanging property to &e{property_name}"

  # When the player check all properties of a block
  # I advise you to not setting a hotbar message for these message, because each message will be sent
  # and the player will not have the time to read on the hotbar.
  # The plugin will send in the order
  # 1) Before
  # 2) Property (for each property) or Current (if the property is the selected)
  # 3) After
  ListProperties:
    # For "Before" and "After" the PH are the same
    # These messages aren't necessary
    # PH :
    # {block} : the block that has all the properties
    Before: "{prefix} &aList of properties for &e{block_material} &a:"
    After:

    # For "Property" and 'Current' the PH are the same
    # These are necessary
    # PH :
    # {property} : the current property
    # {block} : the block that has all the properties
    # {value} : the current value of the property
    Property: "   &8» &9{property_name} &7= &e{value} &8&o(&e&o{property_durability}&8&o)"
    Current: "   &8» &9{property_name} &7= &e{value} &8&o(&e&o{property_durability}&8&o) &e«"

  # When a player remove the permanent values of properties on a block
  # This message isn't necessary
  # PH :
  # {block} : the block that the player removes the values
  RemovePermanentValue: "{prefix} &aAll permanents values have been removed"

  # When the player change the value of a property of the block
  # This message isn't necessary
  # PH :
  # {block} : The block that the player has edited
  # {property} : the property that the payer has edited
  # {value} : the new value of the property
  Success:
  SuccessHotbar: "{prefix} &aProperty &e{property_name} &achanged to &e{value}"

  # When the debug stick of the player breaks
  # This message doesn't replace the "Success" message !
  # This message isn't necessary
  # PH :
  # {block} : the block that the player has edited to break the debug stick
  # {property} : the property that the player has edited to break the debug stick
  # {value} : the new value of the property
  Break: "{prefix} &aYou're debug stick has broke !"

  # If you've enabled the option to warn the player when his debug stick
  # will break
  # This message isn't necessary (even you've enabled the option)
  # PH :
  # {block} : The block that the player has edited
  # {property} : the property that the payer has edited
  # {value} : the new value of the property
  # {durability} : the remaining durability before the debug stick breaks
  WarnBreakMessage: "{prefix} &aYou're debug will break soon ! &7(&e{durability} left&7)"

Command:
  PDS:
    # When the player doesn't have the permission to use the be.machigan.protecteddebugstickl.command
    # This message isn't necessary
    # PH :
    # {perm} : the permission
    NoPerm: "{prefix} &cYou don't have permission to use this be.machigan.protecteddebugstickl.command !"

    # When the be.machigan.protecteddebugstickl.command sender give no argument to the be.machigan.protecteddebugstickl.command
    # This message is necessary !
    # PH : /
    NotEnoughArg: "{prefix} &cPlease, give more argument !"

    Arg:
      Give:
        # When the player wants to perform the be.machigan.protecteddebugstickl.command "/pds give" but
        # he doesn't have the perm
        # This message is not necessary
        # PH :
        # {perm} : the permission
        NoPerm: "{prefix} &cYou don't have the permission to use this argument !"

        # When the be.machigan.protecteddebugstickl.command sender not give the player
        # This message is necessary !
        # PH : /
        NoPlayer: "{prefix} &cPlease, give more argument !"

        # When the player given in the be.machigan.protecteddebugstickl.command doesn't exist or isn't
        # connected
        # This message is necessary !
        # PH :
        # {player} : the player that doesn't exist
        UnknownPlayer: "{prefix} &cThe player &4{player} &cdoesn't exist or isn't connected !"

        # When the be.machigan.protecteddebugstickl.command sender doesn't give the item to give
        # This message is necessary !
        # PH :
        # {player} : the player that should receive the item
        WhatToGive: "{prefix} &cPlease, give the item to give !"

        # When the item given in parameter isn't basic, infinity or inspector
        # This message is necessary !
        # PH :
        # {player} : the player that should receive the item
        # {item} : the item that doesn't exist
        UnknownItem: "{prefix} &cWrong item ! The item &4{item} &cisn't basic, infinity or inspector !"

        # When the item is the basic debug stick, but no durability is given
        # This message is necessary !
        # PH :
        # {player} : the player that should receive the basic debug stick
        NoDurability: "{prefix} &cPlease precise the durability of the debug stick !"

        # When the arg is basic but the durability isn't valid (not a number or below or equal to 0)
        # This message is necessary !
        # PH :
        # {player} : the player that should receive the item
        # {durability} : the durability that's invalid
        InvalidDurability: "{prefix} &cInvalid durability !"

        # When the be.machigan.protecteddebugstickl.command sender has given an item to the player
        # This message is necessary !
        # PH :
        # {player} : the player that has received the item
        # {item} : the item given
        Success: "{prefix} &aYou've given &2{item} &ato &2{player} &a!"

      ReloadConfig:
        # When the player doesn't have the permission to reload the config
        # This message isn't necessary
        # PH :
        # {perm} : the missing permission
        NoPerm: "{prefix} &cYou don't have the permission to use this be.machigan.protecteddebugstickl.command !"

        # When the config has been reloaded
        # This message is necessary !
        # PH : /
        Success: "{prefix} &aThe config has been reloaded !"

        # When the plugin cannot work properly because of big error in the config
        # In this case, in addition of this message, the plugin will log where is the
        # problem
        # This message is necessary !
        # PH : /
        Error: "{prefix} &cSomething goes &4wrong &cin the configuration !
        \n&4&lDisabling the plugin
        \n&c&oSee the logs for more informations"

      Load:
        # When the player doesn't the perm to use the be.machigan.protecteddebugstickl.command
        # This message isn't necessary
        # PH :
        # {perm} : the perm missing
        NoPerm: "{prefix} &cYou doesn't have the perm to do that !"

        # When the player doesn't provide not enough arg
        # This message is necessary !
        # PH : /
        NotEnoughArg: "{prefix} &cPlease precise the file to load !"

        # When the file doesn't exist
        # This message is necessary !
        # PH :
        # {file} : the file that doesn't exist
        FileNotExists: "{prefix} &cThe file &4{file} &cdoesn't exist !"

        # When the file already exists and the be.machigan.protecteddebugstickl.command sender doesn't want to overwrite it
        # This message is necessary !
        # PH :
        # {file} : the file that already exist
        FileAlreadyExists: "{prefix} &cThe file &4{file} &calready exist !
        \n&aUse &2&o/pds load {file} over-write &ato overwrite it"
        FileAlreadyExistsHover: "Click to have the be.machigan.protecteddebugstickl.command"
        FileAlreadyExistsSuggest: "/pds load {file} over-write"

        # When the file has been loaded
        # This message is necessary !
        # PH :
        # {file} : the file that has been loaded
        Success: "{prefix} &aThe file &2{file} &ahas been loaded !"

      Chunk:

        # When the be.machigan.protecteddebugstickl.command sender is not a player (be.machigan.protecteddebugstickl.command is based on location)
        # This message is necessary
        OnlyPlayer:  "{prefix} &cOnly players can use this be.machigan.protecteddebugstickl.command !"

        # When the player doesn't provide the next arg
        # This message is necessary
        NotEnoughArg: "{prefix} &cPlease, provide more argument !"

        Arg:
          Info:
            # When the player wants to perform the be.machigan.protecteddebugstickl.command "/pds chunk info" but
            # he doesn't have the perm
            # This message is not necessary
            # PH :
            # {perm} : the permission
            NoPerm: "{prefix} &cYou don't have the permission to use this argument !"

            # When the chunk has no info about the plugin
            # This message is necessary
            NoInfo: "{prefix} &8&oThe chunk doesn't have informations ..."

            # The first line of information, to explains that is the info
            # This message is necessary
            FirstLine: "{prefix} &aList of blocks that cannot be modified &enaturally &a:"

            # Represent a line of the message of information (each one is a block)
            # This message is necessary
            # PH :
            # {block} : the block that will not suffer from the physic
            Line: "   &8» &9{block_material} &7= &c{block_loc_x} &2{block_loc_y} &b{block_loc_z}"
            LineHover: "&aClick to teleport to &c{block_loc_x} &2{block_loc_y} &b{block_loc_z}"
            LineRun: "/tp {block_loc_x} {block_loc_y} {block_loc_z}"
          Clear:
            # When the player wants to perform the be.machigan.protecteddebugstickl.command "/pds chunk clear" but
            # he doesn't have the perm
            # This message is not necessary
            # PH :
            # {perm} : the permission
            NoPerm: "{prefix} &cYou don't have the permission to use this argument !"

            # When all locations of unmodifiable (naturally) block of the chunk  has been cleared
            # This message is necessary
            Success: "{prefix} &aThe chunk is now &anormal"



    # When the argument isn't a be.machigan.protecteddebugstickl.command
    # This message isn't necessary
    # PH :
    # {arg} : the wrong argument
    NoCommandFound: "{prefix} &cCommand not found !"
